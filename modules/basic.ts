import { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder, SlashCommandBuilder, time } from 'discord.js';
import type { PrefixCommand, SlashCommand } from '../types/command.js';
import { getStore } from '../store/store.js';
import { getEnv } from '../lib/env.js';

// ===================== BASIC CMDS =====================
// Slash: /help
export const slash: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('help')
    .setDescription('H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot VIE'),
  async execute(interaction) {
    const embed = new EmbedBuilder()
      .setTitle('üèØ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot VIE')
      .setDescription('Danh s√°ch c√°c l·ªánh v√† ch·ª©c nƒÉng c·ªßa bot')
      .setColor('#1a237e')
      .addFields(
        { 
          name: 'üí∞ L·ªánh Kinh T·∫ø (Economy)', 
          value: [
            '‚Ä¢ `/work` - L√†m vi·ªác ki·∫øm V (1 gi·ªù)',
            '‚Ä¢ `/daily` - Nh·∫≠n th∆∞·ªüng h√†ng ng√†y',
            '‚Ä¢ `/weekly` - Qu√† h√†ng tu·∫ßn (7 ng√†y)',
            '‚Ä¢ `/bet` - ƒê·∫∑t c∆∞·ª£c may r·ªßi 50/50',
            '‚Ä¢ `/cash` - Ki·ªÉm tra s·ªë d∆∞ t√†i kho·∫£n',
            '‚Ä¢ `/profile` - Xem profile ƒë·∫ßy ƒë·ªß',
            '‚Ä¢ `/give` - Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c',
            '‚Ä¢ `/leaderboard` - Xem b·∫£ng x·∫øp h·∫°ng gi√†u c√≥',
            '‚Ä¢ `/quest` - Xem v√† l√†m nhi·ªám v·ª• h√†ng ng√†y',
            '‚Ä¢ `/inventory` - Xem t√∫i ƒë·ªì ph√¢n lo·∫°i'
          ].join('\n'),
          inline: false
        },
        { 
          name: 'ü•ö L·ªánh ·∫§p Tr·ª©ng (Hatch)', 
          value: [
            '‚Ä¢ `/hatch` - Xem tr·∫°ng th√°i tr·∫°i ·∫•p tr·ª©ng',
            '‚Ä¢ `/hatch-place` - ƒê·∫∑t ·∫•p tr·ª©ng',
            '‚Ä¢ `/hatch-collect` - Thu th·∫≠p tr·ª©ng ƒë√£ n·ªü',
            '‚Ä¢ `/hatch-upgrade` - N√¢ng c·∫•p tr·∫°i'
          ].join('\n'),
          inline: false
        },
        { 
          name: '‚öîÔ∏è L·ªánh SƒÉn Qu√°i (Hunt)', 
          value: [
            '‚Ä¢ `/hunt` - SƒÉn qu√°i th·∫ßn tho·∫°i (2 ph√∫t)',
            '‚Ä¢ `/hunt-equip` - Trang b·ªã v≈© kh√≠',
            '‚Ä¢ `/hunt-inventory` - Xem ƒë·ªì sƒÉn qu√°i',
            '‚Ä¢ `/hunt-use` - D√πng b√πa ph√©p'
          ].join('\n'),
          inline: false
        },
        { 
          name: 'üèØ L·ªánh ƒêi ·∫¢i (Dungeon)', 
          value: [
            '‚Ä¢ `/dungeon` - Xem tr·∫°ng th√°i c√°c ·∫£i',
            '‚Ä¢ `/dungeon-enter` - V√†o ·∫£i',
            '‚Ä¢ `/dungeon-stats` - Th·ªëng k√™ c√° nh√¢n',
            '‚Ä¢ `/dungeon-leaderboard` - BXH chinh ph·ª•c ·∫£i'
          ].join('\n'),
          inline: false
        },
        { 
          name: 'üõí L·ªánh C·ª≠a H√†ng (Shop)', 
          value: [
            '‚Ä¢ `/shop` - Xem t·∫•t c·∫£ c·ª≠a h√†ng',
            '‚Ä¢ `/buy` - Mua item',
            '‚Ä¢ `/sell` - B√°n item'
          ].join('\n'),
          inline: false
        },
        { 
          name: 'üéÆ Gi·∫£i tr√≠ (Entertainment)', 
          value: [
            '‚Ä¢ `/blackjack` - Ch∆°i Blackjack (x2, Blackjack x2.5)',
            '‚Ä¢ `/baucua` - Ch∆°i B·∫ßu Cua',
            '‚Ä¢ `/xocdia` - Ch∆°i X√≥c ƒêƒ©a (x1.95)'
          ].join('\n'),
          inline: false
        },
        { 
          name: '‚öôÔ∏è L·ªánh Kh√°c', 
          value: [
            '‚Ä¢ `/info` - Th√¥ng tin server',
            '‚Ä¢ `/help` - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y'
          ].join('\n'),
          inline: false
        }
      )
      .setFooter({ text: 'üèØ Bot VIE - S·ª©c m·∫°nh bi·ªÉn c·∫£!' })
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed], ephemeral: true });
  }
};

// All prefix commands removed - only slash commands are supported now
// /info - Slash command handler
export const slashInfo: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('info')
    .setDescription('Hi·ªÉn th·ªã th√¥ng tin server'),
  async execute(interaction) {
    const g = interaction.guild!;
    const embed = new EmbedBuilder()
      .setTitle(`Th√¥ng tin server: ${g.name}`)
      .setColor('#1a237e')
      .addFields(
        { name: 'ID', value: g.id, inline: true },
        { name: 'Th√†nh vi√™n', value: `${g.memberCount}`, inline: true }
      );
    await interaction.reply({ embeds: [embed] });
  }
};

// /quest - Slash command handler
export const slashQuest: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('quest')
    .setDescription('Xem nhi·ªám v·ª• h√†ng ng√†y'),
  async execute(interaction) {
    const store = getStore();
    const quests = store.getDailyQuests(interaction.user.id);
    const rows = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId(`quest_refresh:${interaction.user.id}`).setLabel('L√†m M·ªõi').setStyle(ButtonStyle.Secondary)
    );
    const lines = quests.map((q, idx) => `Nhi·ªám v·ª• ${idx + 1}: ${q.desc} ‚Äî Th∆∞·ªüng ${q.reward} V ‚Äî ${q.done ? 'Ho√†n th√†nh' : 'Ch∆∞a'}`);
    await interaction.reply({ content: lines.join('\n') + '\nNh·∫•n "L√†m M·ªõi" n·∫øu nhi·ªám v·ª• qu√° kh√≥ (m·∫•t 2000 V).', components: [rows] });
  }
};

export const slashes: SlashCommand[] = [slash, slashInfo, slashQuest];


