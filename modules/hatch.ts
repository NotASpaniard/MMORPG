import { EmbedBuilder, SlashCommandBuilder } from 'discord.js';
import type { PrefixCommand, SlashCommand } from '../types/command.js';
import { getStore } from '../store/store.js';
import { readFileSync } from 'node:fs';
import path from 'node:path';

// v hatch - Xem tr·∫°ng th√°i tr·∫°i ·∫•p tr·ª©ng

// /hatch - Slash command handler
export const slashHatch: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch')
    .setDescription('Xem tr·∫°ng th√°i tr·∫°i ·∫•p tr·ª©ng'),
  async execute(interaction) {
    const store = getStore();
    const user = store.getUser(interaction.user.id);
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    
    // T√≠nh th·ªùi gian c√≤n l·∫°i cho hatch
    let hatchStatus = 'Kh√¥ng c√≥ tr·ª©ng ƒëang ·∫•p';
    let progressBar = '';
    
    if (user.hatchery.plantedEgg.type) {
      const now = Date.now();
      const eggConfig = gameConfig.eggs[user.hatchery.plantedEgg.type];
      
      if (now < user.hatchery.plantedEgg.harvestAt!) {
        const totalTime = user.hatchery.plantedEgg.harvestAt! - user.hatchery.plantedEgg.plantedAt!;
        const elapsed = now - user.hatchery.plantedEgg.plantedAt!;
        const remaining = user.hatchery.plantedEgg.harvestAt! - now;
        const progress = Math.floor((elapsed / totalTime) * 100);
        
        // T·∫°o progress bar
        const filled = Math.floor(progress / 10);
        progressBar = '[' + '‚ñà'.repeat(filled) + '‚ñë'.repeat(10 - filled) + `] ${progress}%`;
        
        hatchStatus = `ü•ö ƒêang ·∫•p ${eggConfig.emoji} ${eggConfig.name}\n‚è∞ C√≤n ${Math.ceil(remaining / 60000)} ph√∫t\n${progressBar}`;
      } else {
        hatchStatus = `üêâ ${eggConfig.emoji} ${eggConfig.name} ƒë√£ n·ªü, c√≥ th·ªÉ thu th·∫≠p!`;
      }
    }
    
    // Hi·ªÉn th·ªã c√°c lo·∫°i tr·ª©ng c√≥ th·ªÉ ·∫•p
    const availableEggs = Object.entries(gameConfig.eggs)
      .filter(([_, config]: [string, any]) => user.hatchery.level >= config.levelRequired)
      .map(([key, config]: [string, any]) => `${config.emoji} ${config.name} (Level ${config.levelRequired})`)
      .join('\n');
    
    const embed = new EmbedBuilder()
      .setTitle('ü•ö Tr·∫°i ·∫§p Tr·ª©ng')
      .setColor('#1a237e')
      .addFields(
        { name: 'üèóÔ∏è Tr·∫°i Level', value: `${user.hatchery.level}`, inline: true },
        { name: 'ü•ö Tr·∫°ng th√°i', value: hatchStatus, inline: false },
        { name: 'üêâ C√≥ th·ªÉ ·∫•p', value: availableEggs || 'C·∫ßn n√¢ng c·∫•p tr·∫°i', inline: false }
      )
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

// All prefix commands removed - only slash commands are supported now

// /hatch-place - Slash command handler
export const slashHatchPlace: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch-place')
    .setDescription('ƒê·∫∑t tr·ª©ng ·∫•p')
    .addStringOption(option =>
      option.setName('egg_type')
        .setDescription('Lo·∫°i tr·ª©ng mu·ªën ·∫•p')
        .setRequired(true)
        .addChoices(
          { name: 'R·ªìng Xanh', value: 'rong_xanh' },
          { name: 'Ph∆∞·ª£ng Ho√†ng', value: 'phuong_hoang' },
          { name: 'K·ª≥ L√¢n', value: 'ky_lan' },
          { name: 'B·∫°ch H·ªï', value: 'bach_ho' },
          { name: 'Huy·ªÅn V≈©', value: 'huyen_vu' }
        )),
  async execute(interaction) {
    const eggType = interaction.options.getString('egg_type', true);
    const store = getStore();
    const result = store.plantEgg(interaction.user.id, eggType);
    
    if (!result.success) {
      await interaction.reply({ content: result.message, ephemeral: true });
      return;
    }
    
    const embed = new EmbedBuilder()
      .setTitle('ü•ö ƒê·∫∑t Tr·ª©ng ·∫§p')
      .setColor('#4fc3f7')
      .setDescription(result.message)
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

// /hatch-collect - Slash command handler
export const slashHatchCollect: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch-collect')
    .setDescription('Thu th·∫≠p th·∫ßn th√∫ ƒë√£ n·ªü'),
  async execute(interaction) {
    const store = getStore();
    const result = store.hatchEgg(interaction.user.id);
    
    if (!result.success) {
      await interaction.reply({ content: result.message, ephemeral: true });
      return;
    }
    
    // C·ªông XP cho collect
    const xpResult = store.addXP(interaction.user.id, 20);
    
    const embed = new EmbedBuilder()
      .setTitle('üêâ Thu Th·∫≠p Th·∫ßn Th√∫')
      .setColor('#ff6f00')
      .setDescription(`${result.message}\n${xpResult.message}`)
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

// /hatch-upgrade - Slash command handler
export const slashHatchUpgrade: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch-upgrade')
    .setDescription('N√¢ng c·∫•p tr·∫°i ·∫•p tr·ª©ng'),
  async execute(interaction) {
    const store = getStore();
    const result = store.upgradeHatchery(interaction.user.id);
    
    if (!result.success) {
      await interaction.reply({ content: result.message, ephemeral: true });
      return;
    }
    
    const embed = new EmbedBuilder()
      .setTitle('üèóÔ∏è N√¢ng C·∫•p Tr·∫°i')
      .setColor('#ff6f00')
      .setDescription(result.message)
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

export const slashes: SlashCommand[] = [slashHatch, slashHatchPlace, slashHatchCollect, slashHatchUpgrade];
