import { EmbedBuilder, SlashCommandBuilder } from 'discord.js';
import type { PrefixCommand, SlashCommand } from '../types/command.js';
import { getStore } from '../store/store.js';
import { readFileSync } from 'node:fs';
import path from 'node:path';

// Helper function ƒë·ªÉ t·∫°o progress bar
function createProgressBar(current: number, max: number, emoji: string): string {
  const percentage = Math.min(100, Math.max(0, Math.floor((current / max) * 100)));
  const filled = Math.floor(percentage / 10);
  const empty = 10 - filled;
  const bar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  return `${emoji} [${bar}] ${percentage}%`;
}

// Helper function ƒë·ªÉ t·∫°o visual stage indicator
function getStageIndicator(progress: number): string {
  if (progress < 20) return 'ü•ö‚è≥'; // Egg + waiting
  if (progress < 50) return 'ü•ö‚ú®'; // Egg + sparkles
  if (progress < 80) return 'üê£‚è≥'; // Hatching + waiting
  if (progress < 100) return 'üê£‚ú®'; // Hatching + sparkles
  return 'üêâüéâ'; // Dragon + celebration
}

// v hatch - Xem tr·∫°ng th√°i tr·∫°i ·∫•p tr·ª©ng

// /hatch - Slash command handler
export const slashHatch: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch')
    .setDescription('Xem tr·∫°ng th√°i tr·∫°i ·∫•p tr·ª©ng'),
  async execute(interaction) {
    const store = getStore();
    const user = store.getUser(interaction.user.id);
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    
    // T√≠nh th·ªùi gian c√≤n l·∫°i cho hatch
    let hatchStatus = 'Kh√¥ng c√≥ tr·ª©ng ƒëang ·∫•p';
    let progressBar = '';
    let stageIndicator = '';
    let temperature = '';
    let humidity = '';
    
    if (user.hatchery.plantedEgg.type) {
      const now = Date.now();
      const eggConfig = gameConfig.eggs[user.hatchery.plantedEgg.type];
      
      if (now < user.hatchery.plantedEgg.harvestAt!) {
        const totalTime = user.hatchery.plantedEgg.harvestAt! - user.hatchery.plantedEgg.plantedAt!;
        const elapsed = now - user.hatchery.plantedEgg.plantedAt!;
        const remaining = user.hatchery.plantedEgg.harvestAt! - now;
        const progress = Math.floor((elapsed / totalTime) * 100);
        
        // T·∫°o progress bar v√† stage indicator
        progressBar = createProgressBar(elapsed, totalTime, '‚è∞');
        stageIndicator = getStageIndicator(progress);
        temperature = eggConfig.temperature || '25¬∞C';
        humidity = eggConfig.humidity || '60%';
        
        hatchStatus = `${stageIndicator} **${eggConfig.name}**\n${progressBar}\n‚è∞ C√≤n ${Math.ceil(remaining / 60000)} ph√∫t\nüå°Ô∏è Nhi·ªát ƒë·ªô: ${temperature} | üíß ƒê·ªô ·∫©m: ${humidity}`;
      } else {
        stageIndicator = 'üêâüéâ';
        hatchStatus = `${stageIndicator} **${eggConfig.name}** ƒë√£ n·ªü!\nüí∞ C√≥ th·ªÉ thu th·∫≠p ngay!`;
      }
    }
    
    // Hi·ªÉn th·ªã c√°c lo·∫°i tr·ª©ng c√≥ th·ªÉ ·∫•p v·ªõi th√¥ng tin chi ti·∫øt
    const availableEggs = Object.entries(gameConfig.eggs)
      .filter(([_, config]: [string, any]) => user.hatchery.level >= config.levelRequired)
      .map(([key, config]: [string, any]) => {
        const rarity = config.rarity || 'Common';
        const rarityEmoji = rarity === 'Common' ? '‚ö™' : rarity === 'Uncommon' ? 'üü¢' : rarity === 'Rare' ? 'üîµ' : rarity === 'Epic' ? 'üü£' : 'üü°';
        return `${rarityEmoji} ${config.emoji} **${config.name}**\n   ${config.description}\n   ‚è∞ ${config.growTime} ph√∫t | üí∞ ${config.baseReward} V | Level ${config.levelRequired}`;
      })
      .join('\n\n');
    
    const embed = new EmbedBuilder()
      .setTitle('ü•ö Tr·∫°i ·∫§p Tr·ª©ng Th·∫ßn Th√∫')
      .setColor('#1a237e')
      .setDescription('N∆°i ·∫•p n·ªü nh·ªØng sinh v·∫≠t huy·ªÅn tho·∫°i t·ª´ th·∫ßn tho·∫°i Vi·ªát Nam')
      .addFields(
        { name: 'üèóÔ∏è Tr·∫°i Level', value: `**${user.hatchery.level}**`, inline: true },
        { name: 'üìä Tr·∫°ng th√°i', value: hatchStatus, inline: false },
        { name: 'üêâ C√≥ th·ªÉ ·∫•p', value: availableEggs || '‚ùå C·∫ßn n√¢ng c·∫•p tr·∫°i ƒë·ªÉ m·ªü kh√≥a th√™m lo·∫°i tr·ª©ng', inline: false }
      )
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

// All prefix commands removed - only slash commands are supported now

// /hatch-place - Slash command handler
export const slashHatchPlace: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch-place')
    .setDescription('ƒê·∫∑t tr·ª©ng ·∫•p')
    .addStringOption(option =>
      option.setName('egg_type')
        .setDescription('Lo·∫°i tr·ª©ng mu·ªën ·∫•p')
        .setRequired(true)
        .addChoices(
          { name: 'R·ªìng Xanh', value: 'rong_xanh' },
          { name: 'Ph∆∞·ª£ng Ho√†ng', value: 'phuong_hoang' },
          { name: 'K·ª≥ L√¢n', value: 'ky_lan' },
          { name: 'B·∫°ch H·ªï', value: 'bach_ho' },
          { name: 'Huy·ªÅn V≈©', value: 'huyen_vu' }
        )),
  async execute(interaction) {
    const eggType = interaction.options.getString('egg_type', true);
    const store = getStore();
    const result = store.plantEgg(interaction.user.id, eggType);
    
    if (!result.success) {
      await interaction.reply({ content: result.message, ephemeral: true });
      return;
    }
    
    // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ tr·ª©ng
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    const eggConfig = gameConfig.eggs[eggType];
    
    const embed = new EmbedBuilder()
      .setTitle('ü•ö ƒê·∫∑t Tr·ª©ng ·∫§p')
      .setColor('#4fc3f7')
      .setDescription(`**${eggConfig.emoji} ${eggConfig.name}**\n${eggConfig.description}`)
      .addFields(
        { name: 'üìñ Lore', value: eggConfig.lore, inline: false },
        { name: '‚è∞ Th·ªùi gian ·∫•p', value: `${eggConfig.growTime} ph√∫t`, inline: true },
        { name: 'üí∞ Ph·∫ßn th∆∞·ªüng', value: `${eggConfig.baseReward} V`, inline: true },
        { name: 'üå°Ô∏è Nhi·ªát ƒë·ªô', value: eggConfig.temperature, inline: true },
        { name: 'üíß ƒê·ªô ·∫©m', value: eggConfig.humidity, inline: true },
        { name: '‚≠ê ƒê·ªô hi·∫øm', value: eggConfig.rarity, inline: true }
      )
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

// /hatch-collect - Slash command handler
export const slashHatchCollect: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch-collect')
    .setDescription('Thu th·∫≠p th·∫ßn th√∫ ƒë√£ n·ªü'),
  async execute(interaction) {
    const store = getStore();
    const result = store.hatchEgg(interaction.user.id);
    
    if (!result.success) {
      await interaction.reply({ content: result.message, ephemeral: true });
      return;
    }
    
    // C·ªông XP cho collect
    const xpResult = store.addXP(interaction.user.id, 20);
    
    // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ th·∫ßn th√∫ ƒë√£ n·ªü
    const gameConfig = JSON.parse(readFileSync(path.join(process.cwd(), 'data/game_config.json'), 'utf8'));
    const currentUser = store.getUser(interaction.user.id);
    const eggConfig = gameConfig.eggs[currentUser.hatchery.plantedEgg.type!];
    
    const embed = new EmbedBuilder()
      .setTitle('üêâ Thu Th·∫≠p Th·∫ßn Th√∫ Th√†nh C√¥ng!')
      .setColor('#FFD700')
      .setDescription(`**${eggConfig.emoji} ${eggConfig.name}** ƒë√£ n·ªü th√†nh c√¥ng!`)
      .addFields(
        { name: 'üìñ Lore', value: eggConfig.lore, inline: false },
        { name: 'üí∞ Ph·∫ßn th∆∞·ªüng', value: `**${result.reward} V** (+${Math.floor((result.reward / eggConfig.baseReward - 1) * 100)}% bonus)`, inline: true },
        { name: '‚öñÔ∏è Tr·ªçng l∆∞·ª£ng', value: `**${result.kg} KG**`, inline: true },
        { name: 'üéØ XP', value: xpResult.message, inline: true },
        { name: '‚≠ê ƒê·ªô hi·∫øm', value: eggConfig.rarity, inline: true }
      )
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

// /hatch-upgrade - Slash command handler
export const slashHatchUpgrade: SlashCommand = {
  data: new SlashCommandBuilder()
    .setName('hatch-upgrade')
    .setDescription('N√¢ng c·∫•p tr·∫°i ·∫•p tr·ª©ng'),
  async execute(interaction) {
    const store = getStore();
    const result = store.upgradeHatchery(interaction.user.id);
    
    if (!result.success) {
      await interaction.reply({ content: result.message, ephemeral: true });
      return;
    }
    
    const embed = new EmbedBuilder()
      .setTitle('üèóÔ∏è N√¢ng C·∫•p Tr·∫°i')
      .setColor('#ff6f00')
      .setDescription(result.message)
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed] });
  }
};

export const slashes: SlashCommand[] = [slashHatch, slashHatchPlace, slashHatchCollect, slashHatchUpgrade];
